{"version":3,"sources":["../node_modules/react-casino/dist/assets/png/cards sync /^/.//.*/.png$","../node_modules/react-casino/dist/assets/png/chips sync /^/.//.*/.png$","../node_modules/react-casino/dist/assets/png/textures sync /^/.//.*/.png$","util.js","utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Register.js","components/auth/Login.js","components/private-route/PrivateRoute.js","components/dashboard/Dashboard.js","components/room/room.js","App.js","modules/cards.js","allReducers.js","index.js","configureStore.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","getNewDeck","deck","Array","x","i","a","j","length","Math","floor","random","shuffle","cardsInitialState","board","collected","selected","startNewGame","initialState","newDeck","splice","assign","deal","state","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","isAuthenticated","user","loading","combineReducers","auth","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","Navbar","className","to","style","fontFamily","fontSize","Component","Landing","height","width","borderRadius","letterSpacing","Register","onChange","setState","target","value","onSubmit","preventDefault","newUser","name","email","password","password2","props","registerUser","history","this","push","nextProps","paddingLeft","noValidate","error","classnames","invalid","htmlFor","marginTop","connect","userData","post","then","res","catch","err","response","data","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","render","Dashboard","onLogoutClick","onPlayClick","location","split","onClick","resultInWords","suit","Swal","mixin","customClass","confirmButton","cancelButton","buttonsStyling","Room","clickCard","card","cardString","JSON","stringify","console","log","faes","slice","soot","socket","emit","roomId","selectedRemoved","hand","filter","thing","startGame","rmid","lastuser","match","params","dealQuery","on","fire","title","selectPartner","input","confirmButtonText","result","includes","timer","newNTW","currHighest","parseInt","needToWin","callProcess","inputOptions","isConfirmed","isReady","size","valueOf","newReady","add","calledBy","newHighest","Set","socketIOClient","displayStart","userFS","time","Promise","setTimeout","newCollected","values","buttonStyle","justifyContent","alignItems","background","color","margin","padding","cursor","text","showCancelButton","showLoaderOnConfirm","errmsg","Fragment","position","Board","forEach","face","showCards","PepeHands","join","RoundBoard","chosen","showSelected","DisplaySelected","jwtToken","currentTime","Date","now","exp","href","App","exact","path","_startNewGame","_deal","_cleanBoard","_toggleCard","_collectSet","_checkSet","tTime","cards","index","indices","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e5fffe3b.chunk.js","sourcesContent":["var map = {\n\t\"./2C.png\": 140,\n\t\"./2D.png\": 141,\n\t\"./2H.png\": 142,\n\t\"./2S.png\": 143,\n\t\"./3C.png\": 144,\n\t\"./3D.png\": 145,\n\t\"./3H.png\": 146,\n\t\"./3S.png\": 147,\n\t\"./4C.png\": 148,\n\t\"./4D.png\": 149,\n\t\"./4H.png\": 150,\n\t\"./4S.png\": 151,\n\t\"./5C.png\": 152,\n\t\"./5D.png\": 153,\n\t\"./5H.png\": 154,\n\t\"./5S.png\": 155,\n\t\"./6C.png\": 156,\n\t\"./6D.png\": 157,\n\t\"./6H.png\": 158,\n\t\"./6S.png\": 159,\n\t\"./7C.png\": 160,\n\t\"./7D.png\": 161,\n\t\"./7H.png\": 162,\n\t\"./7S.png\": 163,\n\t\"./8C.png\": 164,\n\t\"./8D.png\": 165,\n\t\"./8H.png\": 166,\n\t\"./8S.png\": 167,\n\t\"./9C.png\": 168,\n\t\"./9D.png\": 169,\n\t\"./9H.png\": 170,\n\t\"./9S.png\": 171,\n\t\"./AC.png\": 172,\n\t\"./AD.png\": 173,\n\t\"./AH.png\": 174,\n\t\"./AS.png\": 175,\n\t\"./BACK.png\": 176,\n\t\"./JC.png\": 177,\n\t\"./JD.png\": 178,\n\t\"./JH.png\": 179,\n\t\"./JS.png\": 180,\n\t\"./KC.png\": 181,\n\t\"./KD.png\": 182,\n\t\"./KH.png\": 183,\n\t\"./KS.png\": 184,\n\t\"./QC.png\": 185,\n\t\"./QD.png\": 186,\n\t\"./QH.png\": 187,\n\t\"./QS.png\": 188,\n\t\"./TC.png\": 189,\n\t\"./TD.png\": 190,\n\t\"./TH.png\": 191,\n\t\"./TS.png\": 192,\n\t\"./extra/aces.png\": 193,\n\t\"./extra/back.png\": 194,\n\t\"./extra/bridge-back-blue.png\": 195,\n\t\"./extra/bridge-back-gray.png\": 196,\n\t\"./extra/bridge-back-green.png\": 197,\n\t\"./extra/bridge-back-purple.png\": 198,\n\t\"./extra/bridge-back-red.png\": 199,\n\t\"./extra/bridge-back-yellow.png\": 200,\n\t\"./extra/bridge-backs.png\": 201,\n\t\"./extra/honor-clubs.png\": 202,\n\t\"./extra/honor-diamonds.png\": 203,\n\t\"./extra/honor-hearts.png\": 204,\n\t\"./extra/honor-spades.png\": 205\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 139;","var map = {\n\t\"./black.png\": 207,\n\t\"./blue.png\": 208,\n\t\"./green.png\": 209,\n\t\"./red.png\": 210,\n\t\"./white.png\": 211\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 206;","var map = {\n\t\"./burlap.png\": 213,\n\t\"./cardboard.png\": 214,\n\t\"./default-light.png\": 215,\n\t\"./default.png\": 216,\n\t\"./fabric.png\": 217,\n\t\"./felt.png\": 218,\n\t\"./leather.png\": 219,\n\t\"./noise.png\": 220,\n\t\"./paper.png\": 221,\n\t\"./pinstripe.png\": 222,\n\t\"./slate.png\": 223,\n\t\"./subtle.png\": 224,\n\t\"./suede.png\": 225,\n\t\"./twill.png\": 226\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 212;","//This shit will be our template to actually executing shit in the backend\r\nfunction shuffle(a) {\r\n    var j, x, i\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1))\r\n        x = a[i]\r\n        a[i] = a[j]\r\n        a[j] = x\r\n    }\r\n}\r\n\r\nfunction getNewDeck() {\r\n    let deck = [...Array(81)].map((x, i) => i)\r\n    shuffle(deck)\r\n    return deck\r\n}\r\n\r\nconst cardsInitialState = {\r\n    deck: [],\r\n    board: [],\r\n    collected: [],\r\n    selected: {},\r\n}\r\n\r\nfunction startNewGame(initialState = cardsInitialState) {\r\n    let newDeck = getNewDeck()\r\n    let board = newDeck.splice(0, 12)\r\n    return Object.assign({}, initialState, {\r\n        deck: [...newDeck],\r\n        board,\r\n    })\r\n}\r\n\r\nfunction deal(state) {\r\n    //leaving it blank for now\r\n}\r\n\r\nmodule.exports = {\r\n    cardsInitialState,\r\n    startNewGame,\r\n    deal,\r\n}\r\n","import axios from \"axios\";\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply authorization token to every request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\nexport default setAuthToken;","import axios from 'axios'\r\nimport setAuthToken from '../utils/setAuthToken'\r\nimport jwt_decode from 'jwt-decode'\r\nimport {\r\n    GET_ERRORS,\r\n    SET_CURRENT_USER,\r\n    USER_LOADING,\r\n    GUEST_ACCESS,\r\n} from './types'\r\n// Register User\r\nexport const registerUser = (userData, history) => (dispatch) => {\r\n    axios\r\n        .post('/api/users/register', userData)\r\n        .then((res) => history.push('/login')) // re-direct to login on successful register\r\n        .catch((err) =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data,\r\n            })\r\n        )\r\n}\r\n// Login - get user token\r\nexport const loginUser = (userData) => (dispatch) => {\r\n    axios\r\n        .post('/api/users/login', userData)\r\n        .then((res) => {\r\n            // Save to localStorage\r\n            // Set token to localStorage\r\n            const { token } = res.data\r\n            localStorage.setItem('jwtToken', token)\r\n            // Set token to Auth header\r\n            setAuthToken(token)\r\n            // Decode token to get user data\r\n            const decoded = jwt_decode(token)\r\n            // Set current user\r\n            dispatch(setCurrentUser(decoded))\r\n        })\r\n        .catch((err) =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data,\r\n            })\r\n        )\r\n}\r\n// Set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded,\r\n    }\r\n}\r\n// User loading\r\nexport const setUserLoading = () => {\r\n    return {\r\n        type: USER_LOADING,\r\n    }\r\n}\r\n// Log user out\r\nexport const logoutUser = () => (dispatch) => {\r\n    // Remove token from local storage\r\n    localStorage.removeItem('jwtToken')\r\n    setAuthToken(false)\r\n    dispatch(setCurrentUser({}))\r\n}\r\n//Guest access\r\nexport const guestAccess = () => {\r\n    return {\r\n        type: GUEST_ACCESS,\r\n    }\r\n}\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\nexport const GUEST_ACCESS = \"GUEST_ACCESS\";","import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n  } from \"../actions/types\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n  };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case SET_CURRENT_USER:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: !isEmpty(action.payload),\r\n          user: action.payload\r\n        };\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducers\";\r\nimport errorReducer from \"./errorReducers\";\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) ||\r\n      compose\r\n  )\r\n);\r\n\r\nexport default store;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar-fixed\">\r\n        <nav className=\"z-depth-0\">\r\n          <div className=\"nav-wrapper white\">\r\n            <Link to=\"/\"\r\n              style={{\r\n                fontFamily: \"Calibri\",\r\n                fontSize: 18\r\n              }}\r\n              className=\"col s12 left black-text\">\r\n              Bridge.com\r\n              </Link>\r\n            <Link to=\"/room\"\r\n              style={{\r\n                fontFamily: \"Calibri\",\r\n                fontSize: 18\r\n              }}\r\n              className=\"col s12 right black-text\">\r\n              {/* <i className=\"material-icons\">code</i> */}\r\n                Continue as guest\r\n              </Link>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Landing extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 center-align\">\r\n            <h4>\r\n              <b>BRIDGE</b> that gap with your friends \r\n            </h4>\r\n            <p className=\"flow-text grey-text text-darken-1\">\r\n              Register or login\r\n            </p>\r\n            <br />\r\n            <div className=\"col s6\">\r\n              <Link\r\n                to=\"/register\"\r\n                style={{\r\n                  width: \"140px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\"\r\n                }}\r\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n              >\r\n                Register\r\n              </Link>\r\n            </div>\r\n            <div className=\"col s6\">\r\n              <Link\r\n                to=\"/login\"\r\n                style={{\r\n                  width: \"140px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\"\r\n                }}\r\n                className=\"btn btn-large btn-flat waves-effect white black-text\"\r\n              >\r\n                Log In\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Landing;","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newUser = {\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\n\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s8 offset-s2\">\r\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\r\n              home\r\n            </Link>\r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Register</b> below\r\n              </h4>\r\n              <p className=\"grey-text text-darken-1\">\r\n                Already have an account? <Link to=\"/login\">Log in</Link>\r\n              </p>\r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.name}\r\n                  error={errors.name}\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.name\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">Name</label>\r\n                <span className=\"red-text\">{errors.name}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">{errors.email}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">{errors.password}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password2}\r\n                  error={errors.password2}\r\n                  id=\"password2\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password2\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password2\">Confirm Password</label>\r\n                <span className=\"red-text\">{errors.password2}</span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Sign up\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { loginUser } from '../../actions/authActions'\r\nimport classnames from 'classnames'\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            errors: {},\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // If logged in and user navigates to Login page, should redirect them to dashboard\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push('/dashboard')\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.auth.isAuthenticated) {\r\n            this.props.history.push('/dashboard')\r\n        }\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                errors: nextProps.errors,\r\n            })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const userData = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n        }\r\n\r\n        this.props.loginUser(userData)\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div style={{ marginTop: '4rem' }} className=\"row\">\r\n                    <div className=\"col s8 offset-s2\">\r\n                        <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n                            <i className=\"material-icons left\">\r\n                                keyboard_backspace\r\n                            </i>{' '}\r\n                            Back to home\r\n                        </Link>\r\n                        <div\r\n                            className=\"col s12\"\r\n                            style={{ paddingLeft: '11.250px' }}\r\n                        >\r\n                            <h4>\r\n                                <b>Login</b> below\r\n                            </h4>\r\n                            <p className=\"grey-text text-darken-1\">\r\n                                Don't have an account?{' '}\r\n                                <Link to=\"/register\">Register</Link>\r\n                            </p>\r\n                        </div>\r\n                        <form noValidate onSubmit={this.onSubmit}>\r\n                            <div className=\"input-field col s12\">\r\n                                <input\r\n                                    onChange={this.onChange}\r\n                                    value={this.state.email}\r\n                                    error={errors.email}\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className={classnames('', {\r\n                                        invalid:\r\n                                            errors.email ||\r\n                                            errors.emailnotfound,\r\n                                    })}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span className=\"red-text\">\r\n                                    {errors.email}\r\n                                    {errors.emailnotfound}\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"input-field col s12\">\r\n                                <input\r\n                                    onChange={this.onChange}\r\n                                    value={this.state.password}\r\n                                    error={errors.password}\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className={classnames('', {\r\n                                        invalid:\r\n                                            errors.password ||\r\n                                            errors.passwordincorrect,\r\n                                    })}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span className=\"red-text\">\r\n                                    {errors.password}\r\n                                    {errors.passwordincorrect}\r\n                                </span>\r\n                            </div>\r\n                            <div\r\n                                className=\"col s12\"\r\n                                style={{ paddingLeft: '11.250px' }}\r\n                            >\r\n                                <button\r\n                                    style={{\r\n                                        width: '150px',\r\n                                        borderRadius: '3px',\r\n                                        letterSpacing: '1.5px',\r\n                                        marginTop: '1rem',\r\n                                    }}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                                >\r\n                                    Login\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginUser })(Login)\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      auth.isAuthenticated === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\nclass Dashboard extends Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  onPlayClick = () =>{\r\n    window.location = './lobby';\r\n  };\r\n  render() {\r\n    const { user } = this.props.auth;\r\n    return (\r\n      <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 center-align\">\r\n            <h4>\r\n              <b>Hey there,</b> {user.name.split(\" \")[0]}\r\n              <p className=\"flow-text grey-text text-darken-1\">\r\n                You are logged into your favourite{\" \"}\r\n                <span style={{ fontFamily: \"monospace\" }}>BRIDGE</span> website 👏\r\n              </p>\r\n            </h4>\r\n            <button \r\n              style={{\r\n                width:\"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\"\r\n              }}\r\n              onClick={this.onPlayClick}\r\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n              >\r\n                Proceed to Lobby\r\n            </button>\r\n            <button\r\n              style={{\r\n                width: \"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\"\r\n              }}\r\n              onClick={this.onLogoutClick}\r\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n            >\r\n              Logout\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);","import React, { Component, useState } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\nimport Swal from 'sweetalert2'\r\nimport { Card, HandStyles, CardStyles, Hand } from 'react-casino'\r\nimport socket from 'socket.io-client/lib/socket'\r\n\r\nconst ENDPOINT = 'http://127.0.0.1:5000'\r\n\r\nfunction resultInWords(x) {\r\n    let num\r\n    if (x % 5 === 0) {\r\n        num = x / 5\r\n    } else {\r\n        num = Math.floor(x / 5) + 1\r\n    }\r\n    let suit\r\n    if (x % 5 === 0) {\r\n        suit = 'No trump'\r\n    } else if (x % 5 === 1) {\r\n        suit = 'Diamond'\r\n    } else if (x % 5 === 2) {\r\n        suit = 'Club'\r\n    } else if (x % 5 === 3) {\r\n        suit = 'Heart'\r\n    } else if (x % 5 === 4) {\r\n        suit = 'Spade'\r\n    }\r\n    return num + ' ' + suit\r\n}\r\n\r\nconst swalWithBootstrapButtons = Swal.mixin({\r\n    customClass: {\r\n        confirmButton: 'btn btn-success',\r\n        cancelButton: 'btn btn-danger',\r\n    },\r\n    buttonsStyling: false,\r\n})\r\n\r\nclass Room extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const {\r\n            match: { params },\r\n        } = props\r\n\r\n        this.state = {\r\n            board: [],\r\n            selected: new Set(),\r\n            deck: {}, // this one we need to link with backend and also react-casino\r\n            collected: new Set(),\r\n            socket: socketIOClient(ENDPOINT),\r\n            roomId: '',\r\n            displayStart: true,\r\n            hand: [], //represents hand of client\r\n            //curr highest bid\r\n            currHighest: '0',\r\n            //id of socket that called the curr highest bid\r\n            calledBy: '',\r\n            //sockets that are ready (clicked startGame)\r\n            isReady: new Set(),\r\n            needToWin: '7',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //this.RoomConfigurator()\r\n\r\n        //copied, bides time in ms\r\n        function sleep(time) {\r\n            return new Promise((resolve) => setTimeout(resolve, time))\r\n        }\r\n\r\n        //previously in dealQuery\r\n        this.state.socket.on('dealHand', (hand) => {\r\n            this.setState({\r\n                hand: hand,\r\n            })\r\n            console.log(\r\n                `${this.state.socket.id} rec'd hando of ${this.state.hand}`\r\n            )\r\n        })\r\n\r\n        //previously in dealHand\r\n        this.state.socket.on('cardSelected', (userFS) => {\r\n            console.log(userFS)\r\n            //setState for the selecteed cards\r\n            this.setState({\r\n                selected: this.state.selected.add(userFS),\r\n            })\r\n\r\n            //delays 3000 ms then checks if there are 4 cards in collected, if so, evaluate and assign winner\r\n            sleep(3000).then(() => {\r\n                if (this.state.selected.size === 4) {\r\n                    //insert logic for set winner here\r\n                    const winningSuit = this.state.currHighest % 5\r\n\r\n                    // const user1\r\n                    // const user2\r\n                    // //find some way to get the ids of the winner and the partner\r\n                    // this.state.socket.emit('winsSet', user1 + user2)\r\n\r\n                    //clears the set selected and adds the elements to the set collected\r\n                    let newCollected = this.state.collected\r\n                    for (let card of this.state.selected.values()) {\r\n                        newCollected.add(card)\r\n                    }\r\n                    console.log(newCollected)\r\n                    this.setState({\r\n                        collected: newCollected,\r\n                        selected: new Set(),\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n        this.state.socket.on('updateNTW', () => {\r\n            this.setState({\r\n                needToWin: this.state.needToWin - 1,\r\n            })\r\n        })\r\n    }\r\n\r\n    clickCard = (e, card) => {\r\n        const cardString = JSON.stringify(card)\r\n        console.log(cardString)\r\n        const faes = cardString.slice(9, 10)\r\n        const soot = cardString.slice(20, 21)\r\n        this.state.socket.emit('clickedCard', this.state.roomId + faes + soot)\r\n        const selectedRemoved = this.state.hand.filter(\r\n            (thing) => thing !== faes + soot\r\n        )\r\n        this.setState({\r\n            hand: selectedRemoved,\r\n        })\r\n    }\r\n\r\n    startGame = (rmid, lastuser) => {\r\n        const {\r\n            match: { params },\r\n        } = this.props\r\n        this.state.socket.emit('startGame', rmid + ' ' + lastuser)\r\n    }\r\n\r\n    dealQuery = () => {\r\n        this.state.socket.emit('dealQuery', this.state.roomId)\r\n\r\n        this.state.socket.on('playersNeeded', () => {\r\n            Swal.fire({\r\n                title: 'Not enough players yet',\r\n            })\r\n        })\r\n    }\r\n\r\n    selectPartner = () => {\r\n        Swal.fire({\r\n            title: 'Select your partner, enter value in [face][suit]',\r\n            input: 'text',\r\n            confirmButtonText: 'Confirm',\r\n        }).then((result) => {\r\n            if (this.state.hand.includes(result.value)) {\r\n                Swal.fire({\r\n                    title: `You cannot select yourself`,\r\n                    timer: 2000,\r\n                })\r\n                console.log('cannot select yourself as partner')\r\n                this.selectPartner()\r\n            } else if (result.value === '') {\r\n                console.log('no partner selected')\r\n                Swal.fire({\r\n                    title: 'no partner selected',\r\n                    timer: '2000',\r\n                })\r\n                this.selectPartner()\r\n            } else {\r\n                console.log('other partner selected')\r\n                this.state.socket.emit(\r\n                    'partnerQuery',\r\n                    this.state.roomId + ' ' + result.value\r\n                )\r\n            }\r\n        })\r\n\r\n        this.state.socket.on('assignPartner', (card) => {\r\n            console.log('assigning in progress')\r\n            if (this.state.hand.includes(card)) {\r\n                const newNTW =\r\n                    Math.floor(this.state.currHighest / 5) +\r\n                    parseInt(this.state.needToWin)\r\n                this.setState({ needToWin: newNTW })\r\n            }\r\n        })\r\n    }\r\n\r\n    callProcess = () => {\r\n        this.state.socket.emit(\r\n            'callStart',\r\n            this.state.roomId + ' ' + this.state.socket.id\r\n        )\r\n        this.state.socket.on('startCallSuccess', () => {\r\n            Swal.fire({\r\n                title: 'start calling!',\r\n                input: 'select',\r\n                inputOptions: {\r\n                    '0': 'Pass',\r\n                    '1': '1 Diamond',\r\n                    '2': '1 Clubs',\r\n                    '3': '1 Heart',\r\n                    '4': '1 Spade',\r\n                    '5': '1 No trump',\r\n                    '6': '2 Diamond',\r\n                    '7': '2 Clubs',\r\n                    '8': '2 Heart',\r\n                    '9': '2 Spade',\r\n                    '10': '2 No trump',\r\n                    '11': '3 Diamond',\r\n                    '12': '3 Clubs',\r\n                    '13': '3 Heart',\r\n                    '14': '3 Spade',\r\n                    '15': '3 No trump',\r\n                    '16': '4 Diamond',\r\n                    '17': '4 Clubs',\r\n                    '18': '4 Heart',\r\n                    '19': '4 Spade',\r\n                    '20': '4 No trump',\r\n                    '21': '5 Diamond',\r\n                    '22': '5 Clubs',\r\n                    '23': '5 Heart',\r\n                    '24': '5 Spade',\r\n                    '25': '5 No trump',\r\n                },\r\n            }).then((result) => {\r\n                console.log(\r\n                    'result ' +\r\n                        JSON.stringify(result) +\r\n                        ' currHighest: ' +\r\n                        this.state.currHighest\r\n                )\r\n                if (result.isConfirmed) {\r\n                    if (parseInt(result.value, 10) === 0) {\r\n                        this.state.socket.emit(\r\n                            'readyToStart',\r\n                            this.state.socket.id +\r\n                                ' ' +\r\n                                this.state.roomId +\r\n                                ' ' +\r\n                                this.state.isReady.size\r\n                        )\r\n                    } else {\r\n                        if (\r\n                            parseInt(result.value, 10) <=\r\n                            parseInt(this.state.currHighest, 10)\r\n                        ) {\r\n                            Swal.fire({\r\n                                title: `Call something higher than \r\n                                \\n${resultInWords(this.state.currHighest)}`,\r\n                            })\r\n                        } else {\r\n                            this.state.socket.emit(\r\n                                'callResult',\r\n                                this.state.socket.id +\r\n                                    ' ' +\r\n                                    this.state.roomId +\r\n                                    ' ' +\r\n                                    result.value.valueOf()\r\n                            )\r\n                        }\r\n                    }\r\n                } else {\r\n                    //need to call the swal again\r\n                }\r\n            })\r\n        })\r\n\r\n        this.state.socket.on('isReady', (user) => {\r\n            const newReady = this.state.isReady.add(user)\r\n            this.setState({ isReady: newReady })\r\n            if (this.state.isReady.size === 4) {\r\n                this.startGame(this.state.roomId, user)\r\n            }\r\n        })\r\n\r\n        this.state.socket.on('updateHighest', (result) => {\r\n            const calledBy = result.slice(0, 20)\r\n            const newHighest = result.slice(21)\r\n\r\n            this.setState({\r\n                calledBy: calledBy,\r\n                currHighest: newHighest,\r\n            })\r\n            console.log(`updateHighest rec'd: ${newHighest}`)\r\n        })\r\n\r\n        this.state.socket.on('startCallFail', () => {\r\n            Swal.fire({\r\n                title: 'Cannot start calling, not enough people',\r\n                timer: 2000,\r\n            })\r\n        })\r\n\r\n        this.state.socket.on('updateNeedToWin', () => {\r\n            const newNTW =\r\n                Math.floor(this.state.currHighest / 5) +\r\n                parseInt(this.state.needToWin)\r\n            this.setState({ needToWin: newNTW })\r\n        })\r\n\r\n        this.state.socket.on('selectPartner', () => {\r\n            this.selectPartner()\r\n        })\r\n    }\r\n\r\n    //=======================================================================================\r\n\r\n    render() {\r\n        const {\r\n            board,\r\n            selected,\r\n            socket,\r\n            roomId,\r\n            hand,\r\n            currHighest,\r\n            calledBy,\r\n            isReady,\r\n            needToWin,\r\n        } = this.state\r\n\r\n        //socket listeners======================================================================================\r\n\r\n        //======================================================================================================\r\n        const buttonStyle = {\r\n            width: '350px',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            fontSize: '20px',\r\n            fontFamily: 'Josephin Sans',\r\n            background: 'black',\r\n            borderRadius: '5px',\r\n            color: 'white',\r\n            margin: '10px 0px',\r\n            padding: '10px 60px',\r\n            cursor: 'pointer',\r\n        }\r\n        const longButton = {\r\n            width: '700px',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            fontSize: '20px',\r\n            fontFamily: 'Josephin Sans',\r\n            background: 'black',\r\n            borderRadius: '5px',\r\n            color: 'white',\r\n            margin: '10px 0px',\r\n            padding: '10px 60px',\r\n            cursor: 'pointer',\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    Welcome, player {this.state.socket.id} to room{' '}\r\n                    {this.state.roomId}\r\n                </div>\r\n\r\n                <button\r\n                    style={buttonStyle}\r\n                    onClick={() => {\r\n                        Swal.fire({\r\n                            title: 'You are making your own room',\r\n                            text: 'Room code: ' + this.state.socket.id,\r\n                            confirmButtonText: 'Join room',\r\n                        }).then(() => {\r\n                            this.setState({\r\n                                roomId: this.state.socket.id,\r\n                            })\r\n                            this.state.socket.emit('new_room')\r\n                        })\r\n                    }}\r\n                >\r\n                    Create Room\r\n                </button>\r\n\r\n                <button\r\n                    style={buttonStyle}\r\n                    onClick={() => {\r\n                        Swal.fire({\r\n                            title: 'Please enter the room code to join:',\r\n                            input: 'text',\r\n                            confirmButtonText: 'Join',\r\n                            showCancelButton: true,\r\n                            showLoaderOnConfirm: true,\r\n                        }).then((result) => {\r\n                            this.state.socket.emit('joinRoom', result)\r\n                            this.state.socket.on('RoomFound', () => {\r\n                                this.setState({\r\n                                    roomId: result.value,\r\n                                })\r\n                                //checkNumber checks if there are 4 people in the room\r\n                                this.state.socket.emit(\r\n                                    'checkNumber',\r\n                                    this.state.roomId\r\n                                )\r\n                                //if exactly 4 people are in the room, then server.js calls dealHand\r\n                            })\r\n                            this.state.socket.on('NoRoom', (errmsg) => {\r\n                                Swal.fire({\r\n                                    title: errmsg,\r\n                                    cancelButton: true,\r\n                                }).then((window.location = './room'))\r\n                            })\r\n                        })\r\n                    }}\r\n                >\r\n                    Join Room\r\n                </button>\r\n                {/* <RoomHud\r\n                    displayStart={true}\r\n                    socket={this.state.socket}\r\n                    roomId={this.state.roomId}\r\n                /> */}\r\n                <React.Fragment>\r\n                    <div style={{ position: 'relative' }}>\r\n                        <Board\r\n                            board={board}\r\n                            selected={selected}\r\n                            clickCard={this.clickCard}\r\n                            socket={socket}\r\n                            roomId={roomId}\r\n                            hand={hand}\r\n                            currHighest={currHighest}\r\n                            calledBy={calledBy}\r\n                            isReady={isReady}\r\n                            needToWin={needToWin}\r\n                        />\r\n                    </div>\r\n                    {/* <button style={buttonStyle} onClick={this.dealQuery}>\r\n                        Deal hands\r\n                    </button> */}\r\n                    <button style={buttonStyle} onClick={this.callProcess}>\r\n                        Begin calling\r\n                    </button>\r\n\r\n                    {/* <button\r\n                        onClick={() =>\r\n                            this.state.socket.emit('startGame', this.state.roomId)\r\n                        }\r\n                        style={longButton}\r\n                    >\r\n                        Start\r\n                    </button> */}\r\n                </React.Fragment>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// class RoomHud extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.handleStartButton = this.handleStartButton.bind(this)\r\n//         this.handleWelcome = this.handleWelcome.bind(this)\r\n//         this.state = {\r\n//             displayStart: this.props.displayStart,\r\n//             socket: this.props.socket,\r\n//             roomId: this.props.roomId,\r\n//         }\r\n//     }\r\n\r\n//     handleStartButton() {\r\n//         this.setState({ displayStart: true })\r\n//     }\r\n\r\n//     handleWelcome() {\r\n//         this.setState({ displayStart: false })\r\n//     }\r\n\r\n//     render() {\r\n//         const displayStart = this.state.displayStart\r\n//         let rendered\r\n//         if (displayStart) {\r\n//             rendered = (\r\n//                 <StartButton\r\n//                     socket={this.state.socket}\r\n//                     roomId={this.state.roomId}\r\n//                 />\r\n//             )\r\n//         } else {\r\n//             rendered = <Welcome roomId={this.state.roomId} />\r\n//         }\r\n//         return <div>{rendered}</div>\r\n//     }\r\n// }\r\n\r\n// class StartButton extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             roomId: this.props.roomId,\r\n//             socket: this.props.socket,\r\n//         }\r\n//     }\r\n//     render() {\r\n//         const buttonStyle = {\r\n//             width: '700px',\r\n//             justifyContent: 'center',\r\n//             alignItems: 'center',\r\n//             fontSize: '20px',\r\n//             fontFamily: 'Josephin Sans',\r\n//             background: 'black',\r\n//             borderRadius: '5px',\r\n//             color: 'white',\r\n//             margin: '10px 0px',\r\n//             padding: '10px 60px',\r\n//             cursor: 'pointer',\r\n//         }\r\n//         return (\r\n//             <button\r\n//                 onClick={() =>\r\n//                     this.state.socket.emit('startGame', this.state.roomId)\r\n//                 }\r\n//                 style={buttonStyle}\r\n//             >\r\n//                 Start\r\n//             </button>\r\n//         )\r\n//     }\r\n// }\r\n\r\nconst Board = (props) => {\r\n    function showCards(hand, result) {\r\n        hand.forEach((card) =>\r\n            result.push(\r\n                <Card\r\n                    face={card.slice(0, 1)}\r\n                    suit={card.slice(1)}\r\n                    onClick={(e, card) =>\r\n                        //console.log(JSON.stringify(card))\r\n                        props.clickCard(e, card)\r\n                    }\r\n                />\r\n            )\r\n        )\r\n    }\r\n\r\n    let result = []\r\n    showCards(props.hand, result)\r\n    let PepeHands = () => result\r\n\r\n    return (\r\n        <div>\r\n            <RoundBoard selected={props.selected} />\r\n            <PepeHands />\r\n            <div>\r\n                {/*should probably pick a better font for this*/}\r\n                Current highest is: {resultInWords(props.currHighest)}, called\r\n                by {props.calledBy}\r\n                <br />\r\n                {new Array(...props.isReady).join(', ')} is/are ready to start\r\n                <br />\r\n                You need {props.needToWin} sets to win\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//used to render the board in each round, (props.selected and props.collected)\r\nconst RoundBoard = (props) => {\r\n    // each round => props.selected\r\n    // after each round, add to props.collected\r\n\r\n    function showSelected(selected, result) {\r\n        for (let card of selected.keys()) {\r\n            result.add(<Card face={card.slice(0, 1)} suit={card.slice(1)} />)\r\n        }\r\n    }\r\n\r\n    let chosen = new Set()\r\n    showSelected(props.selected, chosen.add(<CardStyles />))\r\n    let DisplaySelected = () => [...chosen]\r\n    return (\r\n        <div>\r\n            <DisplaySelected />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Room\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport setAuthToken from './utils/setAuthToken'\r\nimport { setCurrentUser, logoutUser } from './actions/authActions'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport store from './store'\r\nimport Navbar from './components/layout/Navbar'\r\nimport Landing from './components/layout/Landing'\r\nimport Register from './components/auth/Register'\r\nimport Login from './components/auth/Login'\r\nimport PrivateRoute from './components/private-route/PrivateRoute'\r\nimport Dashboard from './components/dashboard/Dashboard'\r\nimport Room from './components/room/room'\r\n\r\nif (localStorage.jwtToken) {\r\n    const token = localStorage.jwtToken\r\n    setAuthToken(token)\r\n    const decoded = jwt_decode(token)\r\n    store.dispatch(setCurrentUser(decoded))\r\n    const currentTime = Date.now() / 1000\r\n    if (decoded.exp < currentTime) {\r\n        store.dispatch(logoutUser())\r\n        window.location.href = './login'\r\n    }\r\n}\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <Router>\r\n                <div className=\"App\">\r\n                    <Navbar />\r\n                    <Route exact path=\"/\" component={Landing} />\r\n                    <Route exact path=\"/register\" component={Register} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    {/* <Route exact path=\"/lobby\" component={Lobby} /> */}\r\n                    <Route exact path=\"/room\" component={Room} />\r\n                    <Switch>\r\n                        <PrivateRoute\r\n                            exact\r\n                            path=\"/dashboard\"\r\n                            component={Dashboard}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const { cardsInitialState, _startNewGame, _deal, _cleanBoard, _toggleCard, _checkSet, _collectSet, tTime } = require('../util')\r\n/* ACTION TYPES */\r\nexport const CLEAR_STATE = 'CLEAR_STATE';\r\nexport const START_NEW_GAME = 'START_NEW_GAME';\r\nexport const DEAL = 'DEAL';\r\nexport const TOGGLE_CARD = 'TOGGLE_CARD';\r\nexport const RESET_SELECTED = 'RESET_SELECTED';\r\nexport const COLLECT_SET = 'COLLECT_SET'\r\nexport const CLEAN_BOARD = 'CLEAN_BOARD'\r\n\r\n\r\nconst initialState = Object.assign({}, cardsInitialState)\r\n/* REDUCER */\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case CLEAR_STATE:\r\n      return Object.assign({}, cardsInitialState)\r\n    case START_NEW_GAME: {\r\n      return _startNewGame()\r\n    }\r\n    case DEAL: {\r\n      return _deal(state)\r\n    }\r\n    case CLEAN_BOARD: {\r\n      return _cleanBoard(state)\r\n    }\r\n    // case COLLECT:\r\n    case TOGGLE_CARD: {\r\n      const { index } = action\r\n      return _toggleCard(index, state)\r\n    }\r\n    case COLLECT_SET: {\r\n      const { indices } = action\r\n      return _collectSet(indices, state)\r\n    }\r\n    case RESET_SELECTED:\r\n      return Object.assign({}, state, {\r\n        selected: {}\r\n      })\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n/* ACTION CREATORS */\r\nexport function startNewGame() {\r\n  return function(dispatch) {\r\n    dispatch({ type: CLEAR_STATE })\r\n    setTimeout(function() {\r\n      dispatch({ type: START_NEW_GAME })\r\n    }, tTime)\r\n  }\r\n}\r\n\r\nexport function deal() {\r\n  return {\r\n    type: DEAL\r\n  }\r\n}\r\n\r\nlet clickTimeout;\r\nexport function clickCard(index) {\r\n  return function(dispatch) {\r\n    dispatch(toggleCard(index))\r\n    clearTimeout(clickTimeout);\r\n    clickTimeout = setTimeout(function() {\r\n      dispatch(checkSelected())\r\n    }, 500)\r\n  }\r\n}\r\n\r\n/* checks to see if three cards are selected.\r\n    if they are a set, collect them,\r\n    else clear out the selected cards\r\n */\r\nfunction checkSelected() {\r\n  return function(dispatch, getState) {\r\n    const { selected } =  getState().cards\r\n    const indices = Object.keys(selected).map(str => parseInt(str))\r\n    if (indices.length === 3) {\r\n      dispatch(checkSet(indices))\r\n      dispatch({ type: RESET_SELECTED })\r\n    }\r\n\r\n  }\r\n}\r\n\r\nfunction checkSet(indices) {\r\n  return function(dispatch, getState) {\r\n    _checkSet(indices, () => {\r\n      console.log('you found a set!')\r\n      dispatch({\r\n        type: COLLECT_SET,\r\n        indices\r\n      })\r\n        setTimeout(function() {\r\n          if (getState().cards.board.filter(i => i !== null).length < 12) {\r\n            dispatch(deal())\r\n          } else {\r\n            dispatch({ type: CLEAN_BOARD })\r\n          }\r\n        }, tTime)\r\n    })\r\n\r\n  }\r\n\r\n}\r\nfunction toggleCard(index) {\r\n  return {\r\n    type: TOGGLE_CARD,\r\n    index\r\n  }\r\n}","import {combineReducers} from 'redux';\r\nimport cards from './modules/cards';\r\n\r\nconst rootReducer = combineReducers({\r\n  cards\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport configureStore from './configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import {createStore, applyMiddleware} from 'redux';\r\nimport rootReducer from './allReducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport default function configureStore() {\r\n  return createStore(\r\n    rootReducer, applyMiddleware(thunk)\r\n  );\r\n}"],"sourceRoot":""}